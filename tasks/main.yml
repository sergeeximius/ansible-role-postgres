---
# tasks file for postgres

- name: Import assert.yml
  ansible.builtin.import_tasks: assert.yml
  run_once: yes
  delegate_to: localhost

- name: Install postgres
  ansible.builtin.package:
    name: "{{ postgres_packages }}"
    state: present
  notify:
    - Systemctl daemon-reexec

- name: Create postgres data directory
  ansible.builtin.file:
    path: "{{ postgres_dir }}"
    state: directory
    owner: postgres
    group: postgres
    mode: "755"

- name: Initialize database
  ansible.builtin.command:
    cmd: initdb -D {{ postgres_dir }}
    creates: "{{ postgres_dir }}/PG_VERSION"
  when:
    - ansible_os_family != "Debian"
  become_user: postgres
  become: yes

- name: Configure postgres
  ansible.builtin.lineinfile:
    path: "{{ postgres_conf_dir }}/postgresql.conf"
    regex: "^{{ item.name }} ="
    line: "{{ item.name }} = '{{ item.value }}'"
    create: yes
    mode: "0644"
  notify:
    - Restart postgres
  loop:
    - name: listen_addresses
      value: "*"
  loop_control:
    label: "{{ item.name }}"
    
- name: Create pg_hba.conf
  ansible.builtin.template:
    src: pg_hba.conf.j2
    dest: "{{ postgres_conf_dir }}/pg_hba.conf"
    backup: yes
    mode: "0644"
  notify:
    - Reload postgres

- name: Flush handlers
  ansible.builtin.meta: flush_handlers

- name: Start and enable postgres
  ansible.builtin.service:
    name: postgresql
    state: started
    enabled: yes

- name: Install psycopg2-binary
  ansible.builtin.pip:
    name: psycopg2-binary
    state: present
  when:
    - postgres_databases is defined or
      postgres_users is defined

- name: Flush handlers again
  ansible.builtin.meta: flush_handlers

- name: Create postgres users
  community.postgresql.postgresql_user:
    name: "{{ item.name }}"
    db: "{{ item.db | default(omit) }}"
    password: "{{ item.password }}"
    expires: "{{ item.expires | default(omit) }}"
    role_attr_flags: "{{ item.role_attr_flags }}"
    login_unix_socket: "{{ postgres_socket_directory }}"
  loop: "{{ postgres_users }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - postgres_users is defined
  become_user: postgres
  become: yes
  
- name: Create postgres database
  community.postgresql.postgresql_db:
    name: "{{ item.name }}"
    encoding: "{{ item.encoding | default(omit) }}"
    conn_limit: "{{ item.conn_limit | default(omit) }}"
    owner: "{{ item.owner | default(omit) }}"
    trust_input: "{{ item.trust_input | default(omit) }}"
    state: "{{ item.state | default(omit) }}"
    login_unix_socket: "{{ postgres_socket_directory }}"
  loop: "{{ postgres_databases }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - postgres_databases is defined
  become_user: postgres
  become: yes
